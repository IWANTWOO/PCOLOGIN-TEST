{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/andrewnaysmith/Documents/00_websites/RNequippers/reviews/reviews/Reviews/screens/loginscreens/profile.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport firebase from 'firebase';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Notifications } from 'expo';\nimport * as Permissions from 'expo-permissions';\n\nvar DashboardScreen = function (_Component) {\n  _inherits(DashboardScreen, _Component);\n\n  var _super = _createSuper(DashboardScreen);\n\n  function DashboardScreen() {\n    var _this;\n\n    _classCallCheck(this, DashboardScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.registerForPushNotificationsAsync = function _callee() {\n      var _await$Permissions$as, status, token;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              alert('No notification permissions!');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 9:\n              token = _context.sent;\n              console.log(token);\n              firebase.database().ref('/users/' + _this.currentUser.uid + '/push_token').set(token);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.sendPushNotification = function () {\n      var response = fetch('https://exp.host/--/api/v2/push/send', {\n        method: 'POST',\n        haders: {\n          Accept: 'application/json',\n          'Content-Type': 'aplication/json'\n        },\n        body: JSON.stringify({\n          to: \"ExponentPushToken[rV81rqFt1psGFH1G10xcA_]\",\n          sound: 'default',\n          title: 'Demo',\n          body: 'Demo notification'\n        })\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DashboardScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(firebase.auth().currentUser);\n\n            case 2:\n              this.currentUser = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(this.registerForPushNotificationsAsync());\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }\n      }), React.createElement(Button, {\n        title: \"Sign Out\",\n        onPress: function onPress() {\n          return firebase.auth().signOut();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      }), React.createElement(Button, {\n        title: \"Send Push\",\n        onPress: function onPress() {\n          return _this2.sendPushNotification();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return DashboardScreen;\n}(Component);\n\nexport default DashboardScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/andrewnaysmith/Documents/00_websites/RNequippers/reviews/reviews/Reviews/screens/loginscreens/profile.js"],"names":["React","Component","firebase","Notifications","Permissions","DashboardScreen","registerForPushNotificationsAsync","askAsync","NOTIFICATIONS","status","alert","getExpoPushTokenAsync","token","console","log","database","ref","currentUser","uid","set","sendPushNotification","response","fetch","method","haders","Accept","body","JSON","stringify","to","sound","title","auth","styles","container","signOut","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;;;;;AAOA,SAASC,aAAT,QAA8B,MAA9B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;;IAEMC,e;;;;;;;;;;;;;;;;UACJC,iC,GAAoC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACLF,WAAW,CAACG,QAAZ,CAAqBH,WAAW,CAACI,aAAjC,CADK;;AAAA;AAAA;AACtBC,cAAAA,MADsB,yBACtBA,MADsB;;AAAA,oBAQ1BA,MAAM,KAAK,SARe;AAAA;AAAA;AAAA;;AAS5BC,cAAAA,KAAK,CAAC,8BAAD,CAAL;AAT4B;;AAAA;AAAA;AAAA,+CAcZP,aAAa,CAACQ,qBAAd,EAdY;;AAAA;AAc1BC,cAAAA,KAd0B;AAgB9BC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAKAV,cAAAA,QAAQ,CAACa,QAAT,GAAoBC,GAApB,CAAwB,YAAU,MAAKC,WAAL,CAAiBC,GAA3B,GAA+B,aAAvD,EACCC,GADD,CACKP,KADL;;AArB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAqChCQ,oB,GAAuB,YAAM;AAEvB,UAAIC,QAAQ,GAAGC,KAAK,CAAC,sCAAD,EAAwC;AAC5DC,QAAAA,MAAM,EAAC,MADqD;AAE5DC,QAAAA,MAAM,EAAE;AACJC,UAAAA,MAAM,EAAE,kBADJ;AAEJ,0BAAgB;AAFZ,SAFoD;AAO5DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,UAAAA,EAAE,EAAC,2CADc;AAEjBC,UAAAA,KAAK,EAAE,SAFU;AAGjBC,UAAAA,KAAK,EAAE,MAHU;AAIjBL,UAAAA,IAAI,EAAE;AAJW,SAAf;AAPsD,OAAxC,CAApB;AAgBL,K;;;;;;;;;;;;;+CAzBsBxB,QAAQ,CAAC8B,IAAT,GAAgBf,W;;;AAAzC,mBAAKA,W;;+CACC,KAAKX,iCAAL,E;;;;;;;;;;;6BA0BG;AAAA;;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE2B,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAE;AAAA,iBAAMhC,QAAQ,CAAC8B,IAAT,GAAgBG,OAAhB,EAAN;AAAA,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACf,oBAAL,EAAN;AAAA,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ;AAOH;;;;EAlEyBnB,S;;AAoE9B,eAAeI,eAAf;AAEA,IAAM4B,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,SAAS,EAAE;AACPI,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,UAAU,EAAE,QAFL;AAGPC,IAAAA,cAAc,EAAE;AAHT;AADkB,CAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport firebase from 'firebase';\nimport { \n    View,\n    Text,\n    StyleSheet,\n    Button,\n} from \"react-native\";\nimport { Notifications } from 'expo';\nimport * as Permissions from 'expo-permissions';\n\nclass DashboardScreen extends Component {\n  registerForPushNotificationsAsync = async() => {\n        const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n        // only asks if permissions have not already been determined, because\n        // iOS won't necessarily prompt the user a second time.\n        // On Android, permissions are granted on app installation, so\n        // `askAsync` will never prompt the user\n      \n        // Stop here if the user did not grant permissions\n        if (status !== 'granted') {\n          alert('No notification permissions!');\n          return;\n        }\n      \n        // Get the token that identifies this device\n        let token = await Notifications.getExpoPushTokenAsync();\n\n        console.log(token);\n        \n      \n        // POST the token to your backend server from where you can retrieve it to send push notifications.\n      \n        firebase.database().ref('/users/'+this.currentUser.uid+'/push_token')\n        .set(token)\n\n      };\n\n\n\nasync componentDidMount(){\n\n    this.currentUser = await firebase.auth().currentUser\n    await this.registerForPushNotificationsAsync();\n\n\n};\n\n\n      sendPushNotification = () => {\n\n            let response = fetch('https://exp.host/--/api/v2/push/send',{\n            method:'POST',\n            haders: {\n                Accept: 'application/json',\n                'Content-Type': 'aplication/json'\n\n            },\n            body: JSON.stringify({\n                to:\"ExponentPushToken[rV81rqFt1psGFH1G10xcA_]\",\n                sound: 'default',\n                title: 'Demo',\n                body: 'Demo notification'\n                \n            })\n\n            });\n      };\n\n    render() {\n        return (\n            <View style={styles.container}>\n                <Text></Text>\n                <Button title='Sign Out' onPress={() => firebase.auth().signOut()}/>\n                <Button title='Send Push' onPress={() => this.sendPushNotification()}/>\n            </View>\n        );\n    }\n}\nexport default DashboardScreen;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n    }\n});"]},"metadata":{},"sourceType":"module"}