{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/andrewnaysmith/Documents/00_websites/RNequippers/reviews/reviews/Reviews/screens/loginscreens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport firebase from 'firebase';\nimport * as Google from 'expo-google-app-auth';\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.isUserEqual = function (googleUser, firebaseUser) {\n      if (firebaseUser) {\n        var providerData = firebaseUser.providerData;\n\n        for (var i = 0; i < providerData.length; i++) {\n          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _this.onSignIn = function (googleUser) {\n      console.log('Google Auth Response', googleUser);\n      var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n        unsubscribe();\n\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\n          var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n          firebase.auth().signInWithCredential(credential).then(function (result) {\n            console.log('user signed in');\n\n            if (result.additionalUserInfo.isNewUser) {\n              firebase.database().ref('/users/' + result.user.uid).set({\n                userID: result.user.uid,\n                gmail: result.user.email,\n                profile_picture: result.user.photoURL,\n                Full_Name: result.user.displayName,\n                created_at: Date.now()\n              });\n            } else {\n              firebase.database().ref('/users/' + result.user.uid).update({\n                LastLoggedIn: Date.now()\n              });\n            }\n          }).catch(function (error) {\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            var email = error.email;\n            var credential = error.credential;\n          });\n        } else {\n          console.log('User already signed-in Firebase.');\n        }\n      }.bind(_assertThisInitialized(_this)));\n    };\n\n    _this.signInWithGoogleAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                behavior: 'web',\n                iosClientId: '10009691208-sntdtehpsinbfj4i2jcrinaujd61tqee.apps.googleusercontent.com',\n                scopes: ['profile', 'email']\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === 'success')) {\n                _context.next = 9;\n                break;\n              }\n\n              _this.onSignIn(result);\n\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 9:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, React.createElement(Button, {\n        title: \"Sign In with google\",\n        onPress: function onPress() {\n          return _this2.signInWithGoogleAsync();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/andrewnaysmith/Documents/00_websites/RNequippers/reviews/reviews/Reviews/screens/loginscreens/LoginScreen.js"],"names":["React","Component","firebase","Google","LoginScreen","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","console","log","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInWithCredential","then","result","additionalUserInfo","isNewUser","database","ref","user","set","userID","gmail","email","profile_picture","photoURL","Full_Name","displayName","created_at","Date","now","update","LastLoggedIn","catch","error","errorCode","code","errorMessage","message","bind","signInWithGoogleAsync","logInAsync","behavior","iosClientId","scopes","type","cancelled","styles","container","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { \n    View,\n    Text,\n    StyleSheet,\n    Button,\n} from \"react-native\";\nimport firebase from 'firebase';\nimport * as Google from 'expo-google-app-auth';\nclass LoginScreen extends Component {\n  \n\n    isUserEqual = (googleUser, firebaseUser) => {\n        if (firebaseUser) {\n          var providerData = firebaseUser.providerData;\n          for (var i = 0; i < providerData.length; i++) {\n            if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\n                providerData[i].uid === googleUser.getBasicProfile().getId()) {\n              // We don't need to reauth the Firebase connection.\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n\n     onSignIn = googleUser => {\n        console.log('Google Auth Response', googleUser);\n        // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n        var unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {\n          unsubscribe();\n          // Check if we are already signed-in Firebase with the correct user.\n          if (!this.isUserEqual(googleUser, firebaseUser)) {\n            // Build Firebase credential with the Google ID token.\n            var credential = firebase.auth.GoogleAuthProvider.credential(\n                googleUser.idToken,\n                googleUser.accessToken\n            );\n            // Sign in with credential from the Google user.\n            firebase\n            .auth()\n            .signInWithCredential(credential)\n            .then(function(result) {\n                console.log('user signed in');\n                if(result.additionalUserInfo.isNewUser){\n                firebase\n                .database()\n                .ref('/users/' + result.user.uid)\n                .set({\n                    userID: result.user.uid,\n                    gmail: result.user.email,\n                    profile_picture: result.user.photoURL,\n                    Full_Name: result.user.displayName,\n                    //Last_Name: result.user.givenName,\n                    created_at: Date.now()\n                });\n            \n                }else{\n                    firebase\n                    .database()\n                    .ref('/users/' + result.user.uid).update({\n                        LastLoggedIn: Date.now()\n                    })\n                }\n            \n            })\n            .catch(function(error) {\n              // Handle Errors here.\n              var errorCode = error.code;\n              var errorMessage = error.message;\n              // The email of the user's account used.\n              var email = error.email;\n              // The firebase.auth.AuthCredential type that was used.\n              var credential = error.credential;\n              // ...\n            });\n          } else {\n            console.log('User already signed-in Firebase.');\n          }\n        }.bind(this));\n      }\n\n    signInWithGoogleAsync = async () => {\n      try {\n        const result = await Google.logInAsync({\n            behavior:'web',\n          //androidClientId: YOUR_CLIENT_ID_HERE,\n          iosClientId: '10009691208-sntdtehpsinbfj4i2jcrinaujd61tqee.apps.googleusercontent.com',\n          scopes: ['profile', 'email'],\n        });\n    \n        if (result.type === 'success') {\n            this.onSignIn(result);\n          return result.accessToken;\n        } else {\n          return { cancelled: true };\n        }\n      } catch (e) {\n        return { error: true };\n      }\n    }\n\n\n    render() {\n        return (\n            <View style={styles.container}>\n                <Button \n                title=\"Sign In with google\"\n                onPress={() => this.signInWithGoogleAsync()}\n                />\n            </View>\n        );\n    }\n}\nexport default LoginScreen;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n    }\n});"]},"metadata":{},"sourceType":"module"}